
#include<stdio.h>
#include<stdlib.h>
//#define A  i,(i+j)/2,k,(k+l)/2
//#define B  i,(i+j)/2,(k+l)/2+1,l
//#define C  (i+j)/2+1,j,k,(k+l)/2
//#define D  (i+j)/2+1,j,(k+l)/2+1,l
//#define E  m,(m+n)/2,o,(o+p)/2
//#define F    m,(m+n)/2,(o+p)/2+1,p
//#define G  (m+n)/2+1,n,o,(o+p)/2
//#define H (m+n)/2+1,n,(o+p)/2+1,p
//  q,(q+r)/2,s,(s+t)/2
//  q,(q+r)/2,(s+t)/2+1,t
//  (q+r)/2+1,r,s,(s+t)/2
// (q+r)/2+1,r,(s+t)/2+1,t


int
main ()
{
  std::ios_base::sync_with_stdio (false);
  cin.tie (NULL);




  return 0;
}

void
strassens (int **a, int **b, int c **, int i, int j, int k, int l, int m,
	   int n, int o, int p, int q, int r, int s, int t, int size)
{
  if (i < 0 || j > MAX || k < 0 || l > MAX || m < 0 || n > MAX || o < 0
      || p > MAX)
    return;

  if (j - i + 1 == 2 && l - k + 1 == 2)
    {

    }
  else
    {
      int half = size / 2 + 1;
      int x, y;
      int **S[10];
      for (x = 0; x < 10; x++)
	S[x] =
	  (int **) malloc (sizeof ((int *)malloc (sizeof (int) * half)) *
			   half);
      sub (b, b, S[0], m, (m + n) / 2, (o + p) / 2 + 1, p, (m + n) / 2 + 1, n,
	   (o + p) / 2 + 1, p, 0, half - 1);
      add (a, a, S[1], i, (i + j) / 2, k, (k + l) / 2, i, (i + j) / 2,
	   (k + l) / 2 + 1, l, 0, half - 1);
      add (a, a, S[2], (i + j) / 2 + 1, j, k, (k + l) / 2, (i + j) / 2 + 1, j,
	   (k + l) / 2 + 1, l, 0, half - 1);
      sub (b, b, S[3], (m + n) / 2 + 1, n, o, (o + p) / 2, m, (m + n) / 2, o,
	   (o + p) / 2, 0, half - 1);
      add (a, a, S[4], i, (i + j) / 2, k, (k + l) / 2, (i + j) / 2 + 1, j,
	   (k + l) / 2 + 1, l, 0, half - 1);
      add (b, b, S[5], m, (m + n) / 2, o, (o + p) / 2, (m + n) / 2 + 1, n,
	   (o + p) / 2 + 1, p, 0, half - 1);
      sub (a, a, S[6], i, (i + j) / 2, (k + l) / 2 + 1, l, (i + j) / 2 + 1, j,
	   (k + l) / 2 + 1, l, 0, half - 1);
      add (b, b, S[7], (m + n) / 2 + 1, n, o, (o + p) / 2, (m + n) / 2 + 1, n,
	   (o + p) / 2 + 1, p, 0, half - 1);
      sub (a, a, S[8], i, (i + j) / 2, k, (k + l) / 2, (i + j) / 2 + 1, j, k,
	   (k + l) / 2, 0, half - 1);
      add (b, b, S[9], m, (m + n) / 2, o, (o + p) / 2, m, (m + n) / 2,
	   (o + p) / 2 + 1, p, 0, half - 1);

      int **P[10];
      for (x = 0; x < 7; x++)
	P[x] =
	  (int **) malloc (sizeof ((int *)malloc (sizeof (int) * half)) *
			   half);

      strassens (a, S[0], P[0], i, (i + j) / 2, k, (k + l) / 2, 0, half - 1,
		 0, half - 1, half);
      strassens (b, S[1], P[1], (m + n) / 2 + 1, n, (o + p) / 2 + 1, p, 0,
		 half - 1, 0, half - 1, half);
      strassens (b, S[2], P[2], m, (m + n) / 2, o, (o + p) / 2, 0, half - 1,
		 0, half - 1, half);
      strassens (a, S[3], P[3], (i + j) / 2 + 1, j, (k + l) / 2 + 1, l, 0,
		 half - 1, 0, half - 1, half);
      strassens (S[4], S[5], P[4], 0, half - 1, 0, half - 1, 0, half - 1, 0,
		 half - 1, half);
      strassens (S[6], S[7], P[5], 0, half - 1, 0, half - 1, 0, half - 1, 0,
		 half - 1, half);
      strassens (S[8], S[9], P[6], 0, half - 1, 0, half - 1, 0, half - 1, 0,
		 half - 1, half);

      add (P[3], P[4], P[4], 0, half - 1, 0, half - 1, 0, half - 1, 0,
	   half - 1, 0, half - 1, 0, half - 1);
      add (P[4], P[5], P[5], 0, half - 1, 0, half - 1, 0, half - 1, 0,
	   half - 1, 0, half - 1, 0, half - 1);
      sub (P[5], P[1], c, 0, half - 1, 0, half - 1, 0, half - 1, 0, half - 1,
	   q, (q + r) / 2, s, (s + t) / 2);


      add (P[0], P[1], c, 0, half - 1, 0, half - 1, 0, half - 1, 0, half - 1,
	   q, (q + r) / 2, (s + t) / 2 + 1, t);

      add (P[2], P[3], c, 0, half - 1, 0, half - 1, 0, half - 1, 0, half - 1,
	   (q + r) / 2 + 1, r, s, (s + t) / 2);

      add (P[0], P[4], P[4], 0, half - 1, 0, half - 1, 0, half - 1, 0,
	   half - 1, 0, half - 1, 0, half - 1);
      add (P[2], P[6], P[6], 0, half - 1, 0, half - 1, 0, half - 1, 0,
	   half - 1, 0, half - 1, 0, half - 1);
      sub (P[4], P[6], c, 0, half - 1, 0, half - 1, 0, half - 1, 0, half - 1,
	   (q + r) / 2 + 1, r, (s + t) / 2 + 1, t);

    }


}

void
add (int **a, int **b, int c **, int i, int j, int k, int l, int m, int n,
     int o, int p, int q, int r, int s, int t)
{
  for (; i <= j && m <= n && q <= r; i++, m++, q++)
    for (; k <= l && o <= p && s <= t; k++, o++, s++)
      c[q][s] = a[i][k] + b[m][o];
}

void
sub (int **a, int **b, int c **, int i, int j, int k, int l, int m, int n,
     int o, int p, int q, int r, int s, int t)
{
  for (; i <= j && m <= n && q <= r; i++, m++, q++)
    for (; k <= l && o <= p && s <= t; k++, o++, s++)
      c[q][s] = a[i][k] - b[m][o];
}
